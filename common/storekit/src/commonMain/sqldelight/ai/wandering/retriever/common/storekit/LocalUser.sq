CREATE TABLE localUser (
    id TEXT UNIQUE NOT NULL PRIMARY KEY,
    username TEXT NOT NULL UNIQUE,
    name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    avatarUrl TEXT,
    coverImageUrl TEXT,
    bio TEXT
);

find:
SELECT *
FROM localUser;

findById:
SELECT *
FROM localUser
WHERE id = ?;

upsert:
INSERT OR REPLACE INTO localUser
VALUES ?;

clearById:
DELETE
FROM localUser
WHERE id = ?;

clearAll:
DELETE FROM localUser;

findByIdAndPopulateAll:
SELECT user.id, user.username, user.name, user.email, user.avatarUrl, user.coverImageUrl, user.bio,
       -- Followed
       followed.id AS "followedUserId",
       followed.username AS "followedUsername",
       followed.name AS "followedName",
       followed.email AS "followedEmail",
       followed.avatarUrl AS "followedAvatarUrl",
       followed.coverImageUrl AS "followedCoverImageUrl",
       followed.bio AS "followedBio",
       -- Followers
       follower.id AS "followerId",
       follower.username AS "followerUsername",
       follower.name AS "followerName",
       follower.email AS "followerEmail",
       follower.avatarUrl AS "followerAvatarUrl",
       follower.coverImageUrl AS "followerCoverImageUrl",
       follower.bio AS "followerBio",
       -- Graphs
       localGraph.id AS "graphId",
       localGraph.ownerId AS "graphOwnerId",
       localGraph.name AS "graphName",
       localGraph.created AS "graphCreated",
       -- Tags following
       followedTag.id AS "followedTagId",
       followedTag.name AS "followedTagName",
       -- Graphs following
       followedGraph.id AS "followedGraphId",
       followedGraph.name AS "followedGraphName",
       followedGraph.ownerId AS "followedGraphOwnerId",
       followedGraph.created AS "followedGraphCreated",
       -- Graphs depending on
       -- Pinned graphs
       pinnedGraph.id AS "pinnedGraphId",
       pinnedGraph.name AS "pinnedGraphName",
       pinnedGraph.ownerId AS "pinnedGraphOwnerId",
       pinnedGraph.created AS "pinnedGraphCreated",
       -- Pinned channels
       pinnedChannel.id AS "pinnedChannelId",
       pinnedChannel.userId AS "pinnedChannelUserId",
       pinnedChannel.graphId AS "pinnedChannelGraphId",
       pinnedChannel.tagId AS "pinnedChannelTagId",
       pinnedChannelTag.name AS "pinnedChannelTagName",
       pinnedChannel.created AS "pinnedChannelCreated",
       -- Pinned notes
       pinnedNote.id AS "pinnedNoteId",
       pinnedNote.userId AS "pinnedNoteUserId",
       pinnedNote.content AS "pinnedNoteContent",
       pinnedNote.is_read AS "pinnedNoteIsRead",
       pinnedNote.createdAt AS "pinnedNoteCreatedAt",
       pinnedNote.updatedAt AS "pinnedNoteUpdatedAt",
       -- Notes
       localNote.id AS "noteId",
       localNote.content AS "noteContent",
       localNote.is_read AS "noteIsRead",
       localNote.createdAt AS "noteCreatedAt",
       localNote.updatedAt AS "noteUpdatedAt"

FROM localUser user

-- Following
LEFT JOIN userFollowingUser
ON user.id == userFollowingUser.userId
LEFT JOIN localUser followed
ON userFollowingUser.otherUserId == followed.id

-- Followers
LEFT JOIN userFollowingUser followers
ON user.id == followers.otherUserId
LEFT JOIN localUser follower
ON follower.id == followers.userId

-- Notes
LEFT JOIN localNote
ON localNote.userId == user.id

-- Graphs
LEFT JOIN localGraph
ON localGraph.ownerId == user.id

-- Tags following
LEFT JOIN userFollowingTag
ON user.id == userFollowingTag.userId
LEFT JOIN localTag followedTag
ON followedTag.id == userFollowingTag.tagId

-- Graphs following
LEFT JOIN userFollowingGraph
ON user.id == userFollowingGraph.userId
LEFT JOIN localGraph followedGraph
ON followedGraph.id == userFollowingGraph.graphId

-- Graphs depending on

-- Pinned graphs
LEFT JOIN userPinnedGraph
ON user.id == userPinnedGraph.userId
LEFT JOIN localGraph pinnedGraph
ON pinnedGraph.id == userPinnedGraph.graphId

-- Pinned channels
LEFT JOIN userPinnedChannel
ON user.id == userPinnedChannel.userId
LEFT JOIN localChannel pinnedChannel
ON pinnedChannel.id == userPinnedChannel.channelId
LEFT JOIN localTag pinnedChannelTag
ON pinnedChannelTag.id == pinnedChannel.tagId

-- Pinned notes
LEFT JOIN userPinnedNote
ON user.id == userPinnedNote.userId
LEFT JOIN localNote pinnedNote
ON pinnedNote.id == userPinnedNote.noteId

WHERE user.id = ?;


findNotesByUserId:
SELECT *
FROM localUser user
INNER JOIN localNote note
ON user.id == note.userId
INNER JOIN noteChannel
ON note.id == noteChannel.noteId
INNER JOIN noteMention
ON note.id == noteMention.noteId
INNER JOIN localNoteRelationship
ON note.id == localNoteRelationship.noteId
WHERE user.id = ?
GROUP BY note.id, user.id;


findUserActionsByUserId:
SELECT userAction.id, userAction.userId, userAction.objectId, userAction.type
FROM localUser user
INNER JOIN localUserAction userAction
ON userAction.userId == user.id
WHERE user.id IN ?;